apiVersion: v1
kind: ServiceAccount
metadata:
  name: ssldemo-sa
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ssldemo-dep
  labels:
    app: ssldemo
spec:
  selector:
    matchLabels:
      app: ssldemo
  replicas: 2
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ssldemo
        version: "0.1"
        aadpodidbinding: berichten-deployment
    spec:
      serviceAccountName: ssldemo-sa
      restartPolicy: Always
      containers:
        - image: k8s.gcr.io/echoserver:1.10
          # - image: mcr.microsoft.com/dotnet/core/samples:aspnetapp
          # - image: r.j3ss.co/party-clippy
          name: ssldemo
          securityContext:
            #runAsUser: 65534 # 1000=root, 65534=nobody
            #runAsGroup: 3000
            #fsGroup: 2000
            #runAsNonRoot: true
            allowPrivilegeEscalation: false
            privileged: false
            #readOnlyRootFilesystem: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VSTS_AGENT
              value: $(POD_NAME)-agent
          resources:
            requests:
              cpu: "20m"
              memory: "55M"
            limits:
              cpu: "100m"
              memory: "80M"
          livenessProbe:
            httpGet:
              path: "/"
              port: 8080
            timeoutSeconds: 5
            initialDelaySeconds: 60
          readinessProbe:
            httpGet:
              path: "/"
              port: 8080
            timeoutSeconds: 5
            initialDelaySeconds: 60
          ports:
            - containerPort: 8080
              name: http-main
      #     volumeMounts:
      #       - name: kv-secrets
      #         mountPath: /secrets
      #         readOnly: true
      # volumes:
      #   - name: kv-secrets
      #     csi:
      #       driver: secrets-store.csi.k8s.io
      #       readOnly: true
      #       volumeAttributes:
      #         providerName: "azure"
      #         usePodIdentity: "true"
      #         keyvaultName: "kv-teamb-development"
      #         objects:  |
      #           array:
      #             - |
      #               objectName: ServiceBus--AsbConnectionString
      #               objectType: secret        # object types: secret, key or cert
      #             - |
      #               objectName: ServiceBus--DataBusConnectionString
      #               objectType: secret
      #               objectVersion: ""
      #         resourceGroup: ""               # the resource group of the KeyVault
      #         subscriptionId: ""              # the subscription ID of the KeyVault
      #         tenantId: "d8f00f92-64fd-40fe-9f0b-e09e6b0875cc"
      #   - name: kv-secrets
      #     flexVolume:
      #       driver: "azure/kv"
      #       options:
      #         usepodidentity: "true"
      #         keyvaultname: "kv-teamb-development"
      #         keyvaultobjectnames: "ServiceBus--AsbConnectionString;ServiceBus--DataBusConnectionString;BestaatNiet"
      #         keyvaultobjectaliases: "ServiceBus__AsbConnectionString;ServiceBus__DataBusConnectionString;BestaatNietAlias"
      #         keyvaultobjecttypes: "secret;secret;secret"
      #         tenantid: "d8f00f92-64fd-40fe-9f0b-e09e6b0875cc"      
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: ssldemo-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: ssldemo
      version: "0.1"
---
apiVersion: v1
kind: Service
metadata:
  name:  ssldemo-svc
spec:
  selector:
    app:  ssldemo
    #version: "0.1" # No version filter, should always match newer versions on upgrades
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http-main
      name: http-ssldemo
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ssldemo-ingress
  annotations:
    #kubernetes.io/ingress.class: public
    #kubernetes.io/ingress.class: "intern-dck"
    #kubernetes.io/ingress.class: azure/application-gateway
    
    # IP whitelisting
    #nginx.ingress.kubernetes.io/whitelist-source-range: 13.95.231.11, 87.213.32.38, 10.234.0.0/16,192.168.0.0/16

    # Rate limiting
    #nginx.ingress.kubernetes.io/limit-rps: "1"
    #nginx.ingress.kubernetes.io/limit-rpm: "10"

    # Let op: ssl-passthrough werkt op TCP-niveau, waardoor veel andere annotations niet meer door nginx afgehandeld kunnen worden!
    # nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    
    # Geen entries in access-log (goed voor privacy, maar lastig troubleshooten)
    # nginx.ingress.kubernetes.io/enable-access-log: "false"
    
    # Lua Restu WAF
    #nginx.ingress.kubernetes.io/lua-resty-waf: "active" # inactive, simulate
    #nginx.ingress.kubernetes.io/lua-resty-waf-debug: "true" # For debugging only
    #nginx.ingress.kubernetes.io/lua-resty-waf-extra-rules: '[=[ { "access": [ { "actions": { "disrupt" : "DENY" }, "id": 10001, "msg": "my custom rule", "operator": "STR_CONTAINS", "pattern": "foo", "vars": [ { "parse": [ "values", 1 ], "type": "REQUEST_ARGS" } ] } ], "body_filter": [], "header_filter":[] } ]=]' # Voorbeeld rule: geen param-value 'foo' toegestaat (bv ?a=foo)
    #nginx.ingress.kubernetes.io/lua-resty-waf-allow-unknown-content-types: "true" # anders alleen html/json

    # ModSecurity WAF
    # nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    # nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRule REQUEST_HEADERS_NAMES "^x-waf-test" "log,deny,id:48,status:403,t:lowercase,msg:WAFWAFWAF"
      SecRequestBodyAccess On
      SecDebugLog /tmp/modsec_debug.log
      SecDebugLogLevel 1
      SecAuditLogType Concurrent
      SecRuleEngine Off

    #SecDefaultAction "phase:1,log,auditlog,deny,status:403"
    #SecDefaultAction "phase:2,log,auditlog,deny,status:403"

    # Client SSL cert
    # Enable client certificate authentication
    # nginx.ingress.kubernetes.io/auth-tls-verify-client: "off"
    # Create the secret containing the trusted ca certificates
    # nginx.ingress.kubernetes.io/auth-tls-secret: "development/ca-secret"
    # Specify the verification depth in the client certificates chain
    # nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"
    # Specify an error page to be redirected to verification errors (lastiger troubleshooten)
    # nginx.ingress.kubernetes.io/auth-tls-error-page: "http://www.mysite.com/error-cert.html"
    # Specify if certificates are passed to upstream server (voor identificatie van ingelogde user)
    # nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"

    # Configuration snippet to add response headers for this specific Ingress.
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Request-Id: $req_id";
      more_set_headers "Update: 4";
      more_set_headers "X-Frame-Options: SAMEORIGIN";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; img-src 'self' data:; style-src 'self' 'unsafe-inline' fonts.googleapis.com; font-src fonts.gstatic.com";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Feature-Policy: geolocation 'self'; midi 'none'; sync-xhr 'self'; microphone 'none'; camera 'none'; magnetometer 'none'; gyroscope 'none'; speaker 'none'; fullscreen 'self'; payment 'none'";

    # Querystring rewrite naar /
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - ssldemo.dev.aahg.ot
    secretName: development-ssl
  rules:
  - host: ssldemo.dev.aahg.ot
    http:
      paths:
      - path: /
        backend:
          serviceName: ssldemo-svc
          servicePort: http-ssldemo
